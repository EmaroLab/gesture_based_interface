#!/usr/bin/env python2.7

## @package core
#. This package is the core application of the 
#  state machine

import rospy
import signal
import baxter_gbi_input_msgs.msg as bgi_io
import smach
from std_srvs.srv import Trigger, TriggerResponse
import threading
from graphviz import Digraph
import std_msgs
from mttkinter import mtTkinter as tk
from PIL import Image, ImageTk
from gbi_states import *

##  class FSMThread 
#   inherited form threaing.Thread


class FSMThread(threading.Thread):
    ## the constructor
    def __init__(self):
        threading.Thread.__init__(self)
        
        smach.set_loggers(smach.loginfo,smach.logwarn,self.logdebug,smach.logerr)
        self.subscr = rospy.Subscriber("/beacons/presence", std_msgs.msg.Header, self.presence_cb, callback_args=[self])
        ## attribute to manage the graph in graphviz
        self.imageFile = "state_machine"
        self.imageFile1 = "play_state"
        self.imageFile2 = "record_machine"
        self.imageFile3 = "macro_machine"
        self.imageFile4 = "sequence_machine"

        self.f = Digraph('finite_state_machine', filename='state_machine.gv', format='png')
        self.f.attr('graph', dpi="180")
        self.f.attr(rankdir='TD', size="7",splines=None)
        self.f.attr('node', shape='circle',style='filled')
        self.f.format="png"

        self.f1 = Digraph('play_state', filename='play_state.gv')
        self.f1.attr(rankdir='TD', size="7",splines=None)
        self.f1.attr('node', shape='circle',style='filled')
        self.f1.format="pdf"

        self.f2 = Digraph('record_state', filename='record_state.gv')
        self.f2.attr(rankdir='TD', size="7",splines=None)
        self.f2.attr('node', shape='circle',style='filled')
        self.f2.format="pdf"

        self.f3 = Digraph('macro_state', filename='macro_state.gv')
        self.f3.attr(rankdir='TD', size="7",splines=None)
        self.f3.attr('node', shape='circle',style='filled')
        self.f3.format="pdf"

        self.f4 = Digraph('sequence_state', filename='sequence_state.gv')
        self.f4.attr(rankdir='TD', size="7",splines=None)
        self.f4.attr('node', shape='circle',style='filled')
        self.f4.format="pdf"
        ## sm instance of the container StateMachine with outome=EXIT
        self.sm = smach.StateMachine(outcomes=['EXIT'])
        self.event = FsmEvent()
        self.sm.register_transition_cb(self.transition_cb)
        self.sm.set_initial_state(['INIT'])
        with self.sm:
            smach.StateMachine.add('INIT',
                                   InitState(),
                                   transitions={'config_available': 'CONFIG',
                                                'config_missing': 'WAIT_CONFIG',
                                                'preempted': 'EXIT'})

            smach.StateMachine.add('WAIT_CONFIG',
                                   WaitConfigState(self.event),
                                   transitions={'config_available': 'CONFIG',
                                                'preempted': 'EXIT'})

            smach.StateMachine.add('CONFIG',
                                   ConfigState(self.event),
                                   transitions={'invalid': 'WAIT_CONFIG',
                                                'success': 'WAIT_USER',
                                                'preempted': 'EXIT'})

            smach.StateMachine.add('WAIT_USER',
                                   WaitUserState(self.event),
                                   transitions={'reconf_requested': 'CONFIG',
                                                'user_detected': 'MAIN_MENU',
                                                'preempted': 'EXIT'})

            smach.StateMachine.add('MAIN_MENU',
                                   MainMenuState(self.event),
                                   transitions={'user_missed': 'WAIT_USER',
                                                'play': 'MENU_PLAY',
                                                'record': 'MENU_RECORD',
                                                'macro': 'MENU_MACRO',
                                                'sequence': 'MENU_SEQUENCE',
                                                'selection': 'MAIN_MENU',
                                                'preempted': 'EXIT'})

            smach.StateMachine.add('MENU_PLAY',
                                   PlayMenuState(self.event),
                                   transitions={'user_missed': 'WAIT_USER',
                                                'selection': 'PLAY',
                                                'back': 'MAIN_MENU',
                                                'remove': 'REMOVE_MENU_PLAY',
                                                'preempted': 'EXIT'},
                                   remapping={'selected_item': 'filename'})

            smach.StateMachine.add('MENU_RECORD',
                                   RecordMenuState(self.event),
                                   transitions={'user_missed': 'WAIT_USER',
                                                'selection': 'RECORD',
                                                'back': 'MAIN_MENU',
                                                'remove': 'REMOVE_MENU_RECORD',
                                                'preempted': 'EXIT'},
                                   remapping={'selected_item': 'filename',
                                              'selected_idx': 'context_idx'})

            smach.StateMachine.add('MENU_MACRO',
                                   MacroMenuState(self.event),
                                   transitions={'user_missed': 'WAIT_USER',
                                                'selection': 'SELECTION_MENU_MACRO',
                                                'start': 'MACRO',
                                                'back': 'MAIN_MENU',
                                                'preempted': 'EXIT'},
                                   remapping={'macro_item': 'macro_item',
                                              'macro_idx': 'macro_idx',
                                              'selected_item': 'selected_item',
                                              'selected_idx': 'context_idx',
                                              'macros': 'filenames'})

            smach.StateMachine.add('MENU_SEQUENCE',
                                   SequenceMenuState(self.event),
                                   transitions={'user_missed': 'WAIT_USER',
                                                'selection': 'SELECTION_MENU_SEQUENCE',
                                                'play': 'SEQUENCE',
                                                'back': 'MAIN_MENU',
                                                'preempted': 'EXIT'},
                                   remapping={'sequence_item': 'sequence_item',
                                              'sequence_idx': 'sequence_idx',
                                              'selected_item': 'selected_item',
                                              'selected_idx': 'context_idx',
                                              'sequence': 'sequence',
                                              'new_sequence': 'new_sequence'})

            smach.StateMachine.add('REMOVE_MENU_PLAY',
                                   RemoveMenuState(self.event),
                                   transitions={'user_missed': 'WAIT_USER',
                                                'selection': 'MENU_PLAY',
                                                'back': 'MENU_PLAY',
                                                'preempted': 'EXIT'})

            smach.StateMachine.add('REMOVE_MENU_RECORD',
                                   RemoveMenuState(self.event),
                                   transitions={'user_missed': 'WAIT_USER',
                                                'selection': 'MENU_RECORD',
                                                'back': 'MENU_RECORD',
                                                'preempted': 'EXIT'})

            smach.StateMachine.add('SELECTION_MENU_MACRO',
                                   SelectionMenuState(self.event),
                                   transitions={'user_missed': 'WAIT_USER',
                                                'selection': 'MENU_MACRO',
                                                'back': 'MENU_MACRO',
                                                'preempted': 'EXIT'},
                                   remapping={'selected_item': 'macro_item',
                                              'selected_idx': 'selected_idx',
                                              'context_idx':'context_idx',
                                              'context_idx_out': 'macro_idx'})

            smach.StateMachine.add('SELECTION_MENU_SEQUENCE',
                                   SelectionMenuState(self.event),
                                   transitions={'user_missed': 'WAIT_USER',
                                                'selection': 'MENU_SEQUENCE',
                                                'back': 'MENU_SEQUENCE',
                                                'preempted': 'EXIT'},
                                   remapping={'selected_item': 'sequence_item',
                                              'selected_idx': 'selected_idx',
                                              'context_idx': 'context_idx',
                                              'context_idx_out': 'sequence_idx'})


            ## PLAY
            self.sub_play = smach.StateMachine(outcomes=['user_missed',
                                                         'done',
                                                         'preempted'],
                                               input_keys=['filename'])
            self.sub_play.set_initial_state(['PLAYPLAY'])
            self.sub_play.register_transition_cb(self.transition_cb1)

            smach.StateMachine.add('PLAY',
                                   self.sub_play,
                                   transitions={'user_missed': 'WAIT_USER',
                                                'done': 'MENU_PLAY',
                                                'preempted': 'EXIT'},
                                   remapping={'filename': 'filename'})

            with self.sub_play:
                smach.StateMachine.add('PLAYPLAY',
                                       PlayState(self.event),
                                       transitions={'user_missed': 'user_missed',
                                                    'done': 'done',
                                                    'stop': 'done',
                                                    'pause': 'PLAYPAUSE',
                                                    'preempted': 'preempted'},
                                       remapping={'filename': 'filename'})
                smach.StateMachine.add('PLAYPAUSE',
                                       PauseState(self.event),
                                       transitions={'user_missed': 'user_missed',
                                                    'done': 'done',
                                                    'stop': 'done',
                                                    'resume': 'PLAYPLAY',
                                                    'preempted': 'preempted'})


            ## MACRO
            self.sub_macro = smach.StateMachine(outcomes=['user_missed',
                                                          'done',
                                                          'preempted'],
                                                input_keys=['filenames'])
            self.sub_macro.set_initial_state(['MACROWAIT'])
            self.sub_macro.register_transition_cb(self.transition_cb3)

            smach.StateMachine.add('MACRO',
                                   self.sub_macro,
                                   transitions={'user_missed': 'WAIT_USER',
                                                'done': 'MENU_MACRO',
                                                'preempted': 'EXIT'},
                                   remapping={'filenames': 'filenames'})

            with self.sub_macro:
                smach.StateMachine.add('MACROWAIT',
                                       MacroState(self.event),
                                       transitions={'user_missed': 'user_missed',
                                                    'done': 'done',
                                                    'play': 'MACROPLAY',
                                                    'preempted': 'preempted'},
                                       remapping={'filenames': 'filenames',
                                                  'filename': 'filename'})
                smach.StateMachine.add('MACROPLAY',
                                       PlayState(self.event),
                                       transitions={'user_missed': 'user_missed',
                                                    'done': 'MACROWAIT',
                                                    'stop': 'MACROWAIT',
                                                    'pause': 'MACROPAUSE',
                                                    'preempted': 'preempted'},
                                       remapping={'filename': 'filename'})
                smach.StateMachine.add('MACROPAUSE',
                                       PauseState(self.event),
                                       transitions={'user_missed': 'user_missed',
                                                    'done': 'MACROWAIT',
                                                    'stop': 'MACROWAIT',
                                                    'resume': 'MACROPLAY',
                                                    'preempted': 'preempted'})


            ## RECORD
            self.sub_record = smach.StateMachine(outcomes=['user_missed',
                                                           'done',
                                                           'preempted'],
                                                 input_keys=['filename'])

            self.sub_record.set_initial_state(['RECORDREC'])
            self.sub_record.register_transition_cb(self.transition_cb2)

            smach.StateMachine.add('RECORD',
                                   self.sub_record,
                                   transitions={'user_missed': 'WAIT_USER',
                                                'done': 'MENU_RECORD',
                                                'preempted': 'EXIT'},
                                   remapping={'filename': 'filename'})

            with self.sub_record:
                smach.StateMachine.add('RECORDREC',
                                       RecordState(self.event),
                                       transitions={'user_missed': 'user_missed',
                                                    'done': 'done',
                                                    'preempted': 'preempted'})


            ##SEQUENCE
            self.sub_sequence = smach.StateMachine(outcomes=['user_missed',
                                                             'done',
                                                             'preempted'],
                                                   input_keys=['sequence', 'new_sequence'])
            self.sub_sequence.set_initial_state(['SEQUENCENEXT'])
            self.sub_sequence.register_transition_cb(self.transition_cb4)

            smach.StateMachine.add('SEQUENCE', self.sub_sequence,
                                   transitions={'user_missed': 'WAIT_USER',
                                                'done': 'MENU_SEQUENCE',
                                                'preempted': 'EXIT'},
                                   remapping={'sequence': 'sequence',
                                              'new_sequence': 'new_sequence'})

            with self.sub_sequence:
                smach.StateMachine.add('SEQUENCENEXT',
                                       SequenceState(self.event),
                                       transitions={'user_missed': 'user_missed',
                                                    'done': 'done',
                                                    'play': 'SEQUENCEPLAY',
                                                    'preempted': 'preempted'},
                                       remapping={'sequence': 'sequence',
                                                  'new_sequence': 'new_sequence',
                                                  'filename': 'filename'})
                smach.StateMachine.add('SEQUENCEPLAY',
                                       PlayState(self.event),
                                       transitions={'user_missed': 'user_missed',
                                                    'done': 'SEQUENCENEXT',
                                                    'stop': 'done',
                                                    'pause': 'SEQUENCEPAUSE',
                                                    'preempted': 'preempted'},
                                       remapping={'filename': 'filename'})
                smach.StateMachine.add('SEQUENCEPAUSE',
                                       PauseState(self.event),
                                       transitions={'user_missed': 'user_missed',
                                                    'done': 'done',
                                                    'stop': 'done',
                                                    'resume': 'SEQUENCEPLAY',
                                                    'preempted': 'preempted'})

    def logdebug(self,msg):
        pass

    ## method register_transition_cb
    #  overide of contaneir.register_transition_cb
    #  @param transition_cb function associating to the transition 
    def register_transition_cb(self, transition_cb): 
        self._transition_cbs.append(transition_cb)

    def rendering(self, filename, active_states, f):
        f.node_attr.update(color="0.000 1.000 1.000")
        f.node(active_states[0],color="0.201 0.753 1.000")
        f.render(filename=filename,directory=None,view=None,cleanup=True,format='png')
        f.node(active_states[0],color="0.000 1.000 1.000")
        image = ImageTk.PhotoImage(Image.open(filename+".png"))
        w = image.width()
        h = image.height()
        self.widget.geometry("%dx%d+%d+%d" % (w, h, 0, 0))
        self.panel.configure(image=image)
        self.display = image
        self.widget.update()
   
    ## method register_transition_cb
    #  @param userdata data of used from the active state
    #  @param active_states list of the active states after the transition
    #  @param *cb_args additional arguments
    def transition_cb(self,userdata,active_states,*cb_args):
        self.rendering(self.imageFile,active_states,self.f)

    def transition_cb1(self,userdata,active_states,*cb_args):
        self.rendering(self.imageFile1,active_states,self.f1)

    def transition_cb2(self,userdata,active_states,*cb_args):
        self.rendering(self.imageFile2,active_states,self.f2)

    def transition_cb3(self,userdata,active_states,*cb_args):
        self.rendering(self.imageFile3,active_states,self.f3)

    def transition_cb4(self,userdata,active_states,*cb_args):
        self.rendering(self.imageFile4,active_states,self.f4)

    ## method presence_cb
    #  @param msg message of the topic
    #  @param params list of parameters
    def presence_cb(self, msg, params):
        self.event.signal('user_detected')
        #rospy.loginfo("Action %d triggered by the %s:\n%s\n", params["code"], params["topic"], msg)

    ## method config_cb
    #  @param req rquest from service
    def config_cb(self, req):
        self.event.signal('config')
        #FIXME wait for state machine transition outcome
        return TriggerResponse(success = True, message = "ciao")

    ## method run
    def run(self):
        ## equal to rendering but with tk.label and panle.pack to generate the label and the background space
        fn = self.f.render(filename='state_machine',directory=None, view=False, cleanup=False, format='png')
        self.widget=tk.Tk()
        self.widget.title('State_Machine')
        image = ImageTk.PhotoImage(Image.open("state_machine.png"))
        w = image.width()
        h = image.height()
        self.panel = tk.Label(self.widget, image=image) 
        self.display = image
        self.panel.pack(side=tk.TOP, fill=tk.BOTH, expand=tk.YES)
        self.widget.geometry("%dx%d+%d+%d" % (w, h, 0, 0))

        self.widget.update()
        rospy.Service('/fsm_config', Trigger, self.config_cb)
        
        self.sm.execute()

        
    ## method stop
    def stop(self):
        self.sm.request_preempt()
        while self.sm.is_running():
            pass

    ## method graph_gen
    #  graph generation
    def graph_gen(self):
        tr_edge=self.sm.get_internal_edges()
        tr_edge1=self.sub_play.get_internal_edges()
        tr_edge2=self.sub_record.get_internal_edges()
        tr_edge3=self.sub_macro.get_internal_edges()
        tr_edge4=self.sub_sequence.get_internal_edges()
        
        self.f.node(self.sm.get_initial_states()[0])
        for i in range(0,len(tr_edge)):
            self.f.edge(tr_edge[i][1],tr_edge[i][2],label=tr_edge[i][0])
        for i in range(0,len(tr_edge1)):
            self.f1.edge(tr_edge1[i][1],tr_edge1[i][2],label=tr_edge1[i][0])
        for i in range(0,len(tr_edge2)):
            self.f2.edge(tr_edge2[i][1],tr_edge2[i][2],label=tr_edge2[i][0])
        for i in range(0,len(tr_edge3)):
            self.f3.edge(tr_edge3[i][1],tr_edge3[i][2],label=tr_edge3[i][0])
        for i in range(0,len(tr_edge4)):
            self.f4.edge(tr_edge4[i][1],tr_edge4[i][2],label=tr_edge4[i][0])
   
## function config_server
#  ros node
def config_server():
    rospy.init_node('config_server')
    t = FSMThread()
    t.graph_gen()
    t.start()
    rospy.on_shutdown(t.stop)
    rospy.spin()

if __name__ == "__main__":
    config_server()
