#!/usr/bin/env python2.7

## @package core
# . This package is the core application of the
#  state machine

import rospy
import signal
import baxter_gbi_input_msgs.msg as bgi_io
import smach
from std_srvs.srv import Trigger, TriggerResponse
from sensor_msgs.msg import Image as RosImage
import threading
from graphviz import Digraph
import std_msgs
from mttkinter import mtTkinter as tk
from PIL import Image, ImageTk
from gbi_states import *
from parser import *
import cv2
from cv_bridge import CvBridge, CvBridgeError


##  class FSMThread
#   inherited form threaing.Thread

class ImageConverter(object):
    @staticmethod
    def to_ros(img):
        rosimage = RosImage()
        bridge = CvBridge()
        image = cv2.imread(img)
        rosimage = bridge.cv2_to_imgmsg(image, encoding="bgr8")
        return rosimage


class FSMThread(threading.Thread):
    ## the constructor
    def __init__(self):
        threading.Thread.__init__(self)

        smach.set_loggers(smach.loginfo, smach.logwarn, self.logdebug, smach.logerr)
        self.subscr = rospy.Subscriber("/beacons/presence", std_msgs.msg.Header, self.presence_cb, callback_args=[self])
        ## attribute to manage the graph in graphviz

        self.event = FsmEvent()
        self.image_publisher = rospy.Publisher('/fsm/image', RosImage, queue_size=1)
        parser = Parser(gbi_states, self.event)
        self.sm, self.mm = parser.parse()
        self.graph = []
        id = 0
        for name, machine in self.mm.iteritems():
            imagefile = str(id)
            print name
            edges = machine.get_internal_edges()
            self.graph.append( Digraph(name, filename=name+'.gv', format='png'))
            self.graph[id].attr(rankdir='TB', size="12")
            self.graph[id].attr('node', shape='circle', style='filled', fontsize='25', heigth='1.2', width='1.6',
                        color='lightblue')
            self.graph[id].attr('edge', style='bold', fontsize='0', arrowsize='1.5')
            self.graph[id].node(machine.get_initial_states()[0])
            for i in range(0, len(edges)):
                self.graph[id].edge(edges[i][1], edges[i][2], label=edges[i][0])
            machine.register_start_cb(lambda a, b, graph=self.graph, id=id : self.rendering(imagefile, b, graph[id]))
            machine.register_transition_cb(lambda a, b, graph=self.graph, id=id: self.rendering(imagefile, b, graph[id]))
            id += 1


    def logdebug(self, msg):
        pass

    ## method rendering
    #  this method renders the state-machine in the widget Tkinter
    # 
    # @param filename the graph rendering result in .png
    # @param active_states machine states active after the transition
    # @param f state machine graph  
    def rendering(self, filename, active_states, f):
        print filename
        if active_states:
            f.node(active_states[0], color="red", shape='doublecircle', style='filled')
        f.render(filename=filename, directory=None, view=False, cleanup=True, format='png')
        if active_states:
            f.node(active_states[0], color="lightblue", shape='circle', style='filled')
        image = ImageTk.PhotoImage(Image.open(filename + ".png"))
        w = image.width()
        h = image.height()
        self.panel.configure(image=image)
        self.panel.pack(side=tk.TOP, fill=tk.BOTH, expand=tk.YES)
        self.display = image
        self.widget.geometry("%dx%d+%d+%d" % (w, h, 0, 0))
        self.widget.update()
        image_message = ImageConverter.to_ros(filename+'.png')
        self.image_publisher.publish(image_message)

    ## method presence_cb
    #  @param msg message of the topic
    #  @param params list of parameters
    def presence_cb(self, msg, params):
        self.event.signal('user_detected')

    ## method config_cb
    #  @param req rquest from service
    def config_cb(self, req):
        self.event.signal('config')

    ## method run
    def run(self):
        self.widget = tk.Tk()
        self.panel = tk.Label(self.widget)
        self.widget.title('State_Machine')
        rospy.Service('/fsm_config', Trigger, self.config_cb)
        self.sm.execute()

    ## method stop
    def stop(self):
        self.sm.request_preempt()
        while self.sm.is_running():
            pass


## function config_server
#  ros node
t = None
def config_server():
    rospy.init_node('config_server')
    t = FSMThread()
    t.start()
    rospy.on_shutdown(t.stop)
    rospy.spin()

if __name__ == "__main__":
    config_server()
