#!/usr/bin/env python

## @package core
#. This package is the core application of the 
#  state machine

import rospy
import signal
import baxter_gbi_input_msgs.msg as bgi_io
import smach
from std_srvs.srv import Trigger, TriggerResponse
import threading
from gbi_states import *
from graphviz import Digraph
import std_msgs

##  class FSMThread 
#   inerithed form threaing.Thread 
class FSMThread(threading.Thread):
    ## the constructor
    def __init__(self):
        threading.Thread.__init__(self)
        
        smach.set_loggers(smach.loginfo,smach.logwarn,self.logdebug,smach.logerr)
        self.subscr = rospy.Subscriber("/beacons/presence", std_msgs.msg.Header, self.presence_cb, callback_args=[self])
        ## attribute to manage the graph in graphviz
        self.f = Digraph('finite_state_machine', filename='state_machine.gv')
        self.f.attr(rankdir='TD', size="30",splines=None)
        self.f.attr('node', shape='circle',style='filled')
        self.f.format="pdf"
        self.f1 = Digraph('play_state', filename='play_state.gv')
        self.f1.attr(rankdir='TD', size="30",splines=None)
        self.f1.attr('node', shape='circle',style='filled')
        self.f1.format="pdf"
        self.f2 = Digraph('record_state', filename='record_state.gv')
        self.f2.attr(rankdir='TD', size="30",splines=None)
        self.f2.attr('node', shape='circle',style='filled')
        self.f2.format="pdf"
        self.f3 = Digraph('macro_state', filename='macro_state.gv')
        self.f3.attr(rankdir='TD', size="30",splines=None)
        self.f3.attr('node', shape='circle',style='filled')
        self.f3.format="pdf"
        self.f4 = Digraph('sequence_state', filename='sequence_state.gv')
        self.f4.attr(rankdir='TD', size="30",splines=None)
        self.f4.attr('node', shape='circle',style='filled')
        self.f4.format="pdf"
        ## sm instance of the container StateMachine with outome=EXIT
        self.sm = smach.StateMachine(outcomes=['EXIT'])
        self.event = FsmEvent()
        self.sm.register_transition_cb(self.transition_cb)
        self.sm.set_initial_state(['INIT'])
        with self.sm:
            smach.StateMachine.add('INIT', InitState(),
                                    transitions={'config_available':'CONFIG',
                                                'config_missing':'WAIT_CONFIG',
                                                'preempted':'EXIT'})

            smach.StateMachine.add('CONFIG', ConfigState(bgi_io.signal, self.action_cb),
                                    transitions={'invalid':'WAIT_CONFIG',
                                                'success':'WAIT_USER',
                                                'preempted':'EXIT'})
            smach.StateMachine.add('WAIT_CONFIG', WaitConfigState(self.event),
                                    transitions={'config_available':'CONFIG',
                                                 'preempted':'EXIT'})
            smach.StateMachine.add('WAIT_USER', WaitUserState(self.event),
                                    transitions={'reconf_requested':'CONFIG',
                                                'user_detected':'MAIN_MENU',
                                                'preempted':'EXIT'})
            smach.StateMachine.add('MAIN_MENU', MainMenuState(self.event),
                                    transitions={'user_missed':'WAIT_USER',
                                                'play_selected':'MENU_PLAY',
                                                'record_selected':'MENU_RECORD',
                                                'macro_selected':'MENU_MACRO',
                                                'sequence_selected':'MENU_SEQUENCE',
                                                'selection':'MAIN_MENU',
                                                'preempted':'EXIT'})
            smach.StateMachine.add('MENU_PLAY', PlayMenuState(self.event),
                                    transitions={'user_missed':'WAIT_USER',
                                                'selection':'PLAY',
                                                'back':'MAIN_MENU',
                                                'remove': 'REMOVE_MENU_PLAY',
                                                'preempted':'EXIT'},
                                    remapping={'filename':'sm_data'})
            smach.StateMachine.add('REMOVE_MENU_PLAY', RemoveMenuState(self.event),
                                    transitions={'user_missed':'WAIT_USER',
                                                 'selection': 'MENU_PLAY',
                                                 'back':'MENU_PLAY',
                                                 'preempted':'EXIT'})
            smach.StateMachine.add('REMOVE_MENU_RECORD', RemoveMenuState(self.event),
                                    transitions={'user_missed':'WAIT_USER',
                                                 'selection':'MENU_RECORD',
                                                 'back':'MENU_RECORD',
                                                 'preempted':'EXIT'})
            smach.StateMachine.add('MENU_RECORD', RecordMenuState(self.event),
                                    transitions={'user_missed':'WAIT_USER',
                                                'selection':'RECORD',
                                                'back':'MAIN_MENU',
                                                'remove':'REMOVE_MENU_RECORD',
                                                'preempted':'EXIT'})
            smach.StateMachine.add('MENU_MACRO', MacroMenuState(self.event),
                                    transitions={'user_missed':'WAIT_USER',
                                                'selection':'SUB_MACRO',
                                                'play':'MACRO',
                                                'back':'MAIN_MENU',
                                                'preempted':'EXIT'})
            smach.StateMachine.add('SUB_MACRO', SubMacroMenuState(self.event),
                                    transitions={'user_missed':'WAIT_USER',
                                                'selection':'MENU_MACRO',
                                                'back':'MENU_MACRO',
                                                'preempted':'EXIT'})
            smach.StateMachine.add('MENU_SEQUENCE',SequenceMenuState(self.event),
                                    transitions={'user_missed':'WAIT_USER',
                                                'selection':'SUB_SEQUENCE',
                                                'play': 'SEQUENCE',
                                                'back':'MAIN_MENU',
                                                'preempted':'EXIT'})
            smach.StateMachine.add('SUB_SEQUENCE', SubSequenceMenuState(self.event),
                                   transitions={'user_missed': 'WAIT_USER',
                                                'selection': 'MENU_SEQUENCE',
                                                'back': 'MENU_SEQUENCE',
                                                'preempted': 'EXIT'})
            
            self.sub_play = smach.StateMachine(outcomes=['user_missed',
                                                 'done',
                                                'preempted',
                                                'rec_s'])
            self.sub_play.set_initial_state(['PLAYSTATE'])
            self.sub_play.register_transition_cb(self.transition_cb1)
            self.sub_record = smach.StateMachine(outcomes=['user_missed',
                                                 'done',
                                                'preempted'])
            self.sub_record.set_initial_state(['RECORDSTATE'])
            self.sub_record.register_transition_cb(self.transition_cb2)
            self.sub_macro = smach.StateMachine(outcomes=['user_missed',
                                                 'done',
                                                'preempted'])
            self.sub_macro.set_initial_state(['MACROSTATE'])
            self.sub_macro.register_transition_cb(self.transition_cb3)
            self.sub_sequence = smach.StateMachine(outcomes=['user_missed',
                                                 'done',
                                                'preempted'])
            self.sub_sequence.set_initial_state(['SEQUENCESTATE'])
            self.sub_sequence.register_transition_cb(self.transition_cb4)

            with self.sub_play:
                smach.StateMachine.add('PLAYSTATE', PlayState(self.event),
                                        transitions={'user_missed':'user_missed',
                                                 'done':'done',
                                                 'pause':'PAUSEP',
                                                 'preempted':'preempted'},
                                        remapping={'filename':'sm_data'})
                smach.StateMachine.add('PAUSEP', PlayPause(self.event),
                                        transitions={'user_missed':'user_missed',
                                                 'done':'done',
                                                 'resume':'PLAYSTATE',
                                                 'preempted':'preempted',
                                                 'rec_s':'rec_s'},
                                        )

            with self.sub_record:
                smach.StateMachine.add('RECORDSTATE', RecordState(self.event),
                                    transitions={'user_missed':'user_missed',
                                                 'done':'done',
                                                 'preempted':'preempted'})

            with self.sub_macro:
                smach.StateMachine.add('MACROSTATE', MacroState(self.event),
                                        transitions={'user_missed':'user_missed',
                                                 'done':'done',
                                                 'pause':'PAUSEM',
                                                 'preempted':'preempted'})
                smach.StateMachine.add('PAUSEM', MacroPause(self.event),
                                        transitions={'user_missed':'user_missed',
                                                 'done':'done',
                                                 'resume':'MACROSTATE',
                                                 'preempted':'preempted'},
                                        )

            with self.sub_sequence:
                smach.StateMachine.add('SEQUENCESTATE', SequenceState(self.event),
                                        transitions={'user_missed':'user_missed',
                                                 'done':'done',
                                                 'pause':'PAUSES',
                                                'preempted':'preempted'})
                smach.StateMachine.add('PAUSES', SequencePause(self.event),
                                        transitions={'user_missed':'user_missed',
                                                 'done':'done',
                                                 'resume':'SEQUENCESTATE',
                                                 'preempted':'preempted'},
                                        )

            smach.StateMachine.add('PLAY', self.sub_play,
                                        transitions={'user_missed':'WAIT_USER',
                                                 'done':'MAIN_MENU',
                                                 'preempted':'EXIT',
                                                 'rec_s':'RECORD'})

            smach.StateMachine.add('RECORD', self.sub_record,
                                        transitions={'user_missed':'WAIT_USER',
                                                 'done':'MAIN_MENU',
                                                 'preempted':'EXIT'})

            smach.StateMachine.add('MACRO', self.sub_macro,
                                        transitions={'user_missed':'WAIT_USER',
                                                 'done':'MAIN_MENU',
                                                 'preempted':'EXIT'})

            smach.StateMachine.add('SEQUENCE', self.sub_sequence,
                                        transitions={'user_missed':'WAIT_USER',
                                                 'done':'MAIN_MENU',
                                                'preempted':'EXIT'})
            rospy.sleep(3)

    def logdebug(self,msg):
        pass

    ## method register_transition_cb
    #  overide of contaneir.register_transition_cb
    #  @param transition_cb function associating to the transition 
    def register_transition_cb(self, transition_cb): 
        self._transition_cbs.append((transition_cb)) 

    ## method register_transition_cb
    #  @param userdata data of used from the active state
    #  @param active_states list of the active states after the transition
    #  @param *cb_args additional arguments
    def transition_cb(self,userdata,active_states,*cb_args):
        self.f.node_attr.update(color="0.000 1.000 1.000")
        self.f.node(active_states[0],color="0.201 0.753 1.000")
        self.f.render(filename='state_machine',directory=None,view=True,cleanup=True)
        self.f.node(active_states[0],color="0.000 1.000 1.000")

    def transition_cb1(self,userdata,active_states,*cb_args):
        self.f1.node_attr.update(color="0.000 1.000 1.000")
        self.f1.node(active_states[0],color="0.201 0.753 1.000")
        self.f1.render(filename='play_state',directory=None,view=True,cleanup=True)
        self.f1.node(active_states[0],color="0.000 1.000 1.000")

    def transition_cb2(self,userdata,active_states,*cb_args):
        self.f2.node_attr.update(color="0.000 1.000 1.000")
        self.f2.node(active_states[0],color="0.201 0.753 1.000")
        self.f2.render(filename='record_state',directory=None,view=True,cleanup=True)
        self.f2.node(active_states[0],color="0.000 1.000 1.000")

    def transition_cb3(self,userdata,active_states,*cb_args):
        self.f3.node_attr.update(color="0.000 1.000 1.000")
        self.f3.node(active_states[0],color="0.201 0.753 1.000")
        self.f3.render(filename='macro_state',directory=None,view=True,cleanup=True)
        self.f3.node(active_states[0],color="0.000 1.000 1.000")

    def transition_cb4(self,userdata,active_states,*cb_args):
        self.f4.node_attr.update(color="0.000 1.000 1.000")
        self.f4.node(active_states[0],color="0.201 0.753 1.000")
        self.f4.render(filename='sequence_state',directory=None,view=True,cleanup=True)
        self.f4.node(active_states[0],color="0.000 1.000 1.000")

    ## method presence_cb
    #  @param msg message of the topic
    #  @param params list of parameters
    def presence_cb(self, msg, params):
        self.event.signal('user_detected')

        #rospy.loginfo("Action %d triggered by the %s:\n%s\n", params["code"], params["topic"], msg)


    ## method action_cb
    #  @param msg message of the topic
    #  @param params list of parameters
    def action_cb(self, msg, params):
        self.event.signal('action_' + str(params["code"]))
        #rospy.loginfo("Action %d triggered by the %s:\n%s\n", params["code"], params["topic"], msg)

    ## method config_cb
    #  @param req rquest from service
    def config_cb(self, req):
        self.event.signal('config')
        #FIXME wait for state machine transition outcome
        return TriggerResponse(success = True, message = "ciao")

    ## method run
    def run(self):
        rospy.Service('/fsm_config', Trigger, self.config_cb)
        self.sm.execute()
    ## method stop
    def stop(self):
        self.sm.request_preempt()
        while self.sm.is_running(): pass

    ## method graph_gen
    #  graph generation
    def graph_gen(self):
        tr_edge=self.sm.get_internal_edges()
        tr_edge1=self.sub_play.get_internal_edges()
        tr_edge2=self.sub_record.get_internal_edges()
        tr_edge3=self.sub_sequence.get_internal_edges()
        tr_edge4=self.sub_macro.get_internal_edges()
        self.f.node(self.sm.get_initial_states()[0])
        for i in range(0,len(tr_edge)):
            self.f.edge(tr_edge[i][1],tr_edge[i][2],label=tr_edge[i][0])
        for i in range(0,len(tr_edge1)):
            self.f1.edge(tr_edge1[i][1],tr_edge1[i][2],label=tr_edge1[i][0])
        for i in range(0,len(tr_edge2)):
            self.f2.edge(tr_edge2[i][1],tr_edge2[i][2],label=tr_edge2[i][0])
        for i in range(0,len(tr_edge3)):
            self.f3.edge(tr_edge3[i][1],tr_edge3[i][2],label=tr_edge3[i][0])
        for i in range(0,len(tr_edge4)):
            self.f4.edge(tr_edge4[i][1],tr_edge4[i][2],label=tr_edge4[i][0])

## function config_server
#  ros node
def config_server():
    t = FSMThread()
    rospy.init_node('config_server')
    t.graph_gen()
    t.f.render(filename='state_machine',directory=None,view=True,cleanup=True)
    filename = "state_machine.gv"
    '''file = open(filename, "r")
    for line in file:
        print line'''
    t.start()

    rospy.on_shutdown(t.stop)
    rospy.spin()

if __name__ == "__main__":
    config_server()
