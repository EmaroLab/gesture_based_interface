#!/usr/bin/env python
import roslib
import rospy
from BaxterGBI_core_srvs.srv import *
import BaxterGBI_input_msgs.msg as bgi_io
import smach
import smach_ros
from std_msgs.msg import Empty
import threading
trigger=threading.Event()


subscribers = []

def callback(msg, params):
	global trigger
	trigger.set()
	rospy.loginfo("Action %d triggered by the %s:\n%s\n", params["code"], params["topic"], msg)


def handle_config(req):
	global subscribers
	
	#TODO: check if we have at least one topic per action
	
	for subscriber in subscribers:
		subscriber.unregister()
	subscribers = []

	for i in range(1,7):	
		#print("key_" + str(i) + "_topics")	
		#print(getattr(req, "key_" + str(i) + "_topics"))
		for topic in getattr(req, "key_" + str(i) + "_topics"):
			sub = rospy.Subscriber(	topic, 
											bgi_io.signal, 
											callback, 
											{"topic": topic, "code": i}
			)
			subscribers.append(sub)


	resp = configurationResponse(success = True)

	return resp

def config_server():
	rospy.init_node('config_server')
	serv = rospy.Service('config', configuration, handle_config)

	sm = smach.StateMachine(outcomes=['out1','out2'])
	with sm:
		smach.StateMachine.add('STATE', state(trigger), 
								transitions={'invalid':'STATE', 
											'valid':'STATE'})
	sis = smach_ros.IntrospectionServer('smach_server', sm, '/SM_ROOT')
	sis.start()
	sm.execute()
	rospy.spin()
	sis.stop()



class state(smach.State):
	def __init__(self, trigger_event ,input_keys = [],output_keys=[]):
		smach.State.__init__(
			self,
			outcomes = ['valid','invalid'],
			input_keys = input_keys,
			output_keys = output_keys)

		self._trigger_event = trigger_event

	def execute(self, userdata):
		rospy.loginfo('Executing the state')
		self._trigger_event.clear()
		self._trigger_event.wait()
		return 'valid'


if __name__ == "__main__":
	try:
		config_server()
	except rospy.ROSInterruptException:
		pass


