#!/usr/bin/env python
import roslib
import rospy
import signal
from BaxterGBI_core_srvs.srv import *
import BaxterGBI_input_msgs.msg as bgi_io
import smach
import smach_ros
from std_msgs.msg import Empty
from std_srvs.srv import Trigger, TriggerResponse
import threading
from collections import namedtuple
from gbi_states import *
import sys

"""
def myhook():
  print "shutdown time!"
  sys.exit(1)

rospy.on_shutdown(myhook)
"""


class FSMThread(threading.Thread):
	def __init__(self):
		threading.Thread.__init__(self)
		self.event = FsmEvent()

	def presence_cb(self, msg, params):
		self.event.signal('user_detected')
		#rospy.loginfo("Action %d triggered by the %s:\n%s\n", params["code"], params["topic"], msg)

	def action_cb(self, msg, params):
		self.event.signal('action_' + str(params["code"]))
		#rospy.loginfo("Action %d triggered by the %s:\n%s\n", params["code"], params["topic"], msg)

	def config_cb(self, req):
		self.event.signal('config')
		#FIXME wait for state machine transition outcome
		return TriggerResponse(success = True, message = "ciao")

	def run(self):
		serv = rospy.Service('config', Trigger, self.config_cb)

		sm = smach.StateMachine(outcomes=['MAIN_MENU','out2'])
		with sm:
			smach.StateMachine.add('INIT', InitState(), 
									transitions={'config_available':'CONFIG',
												'config_missing':'WAIT_CONFIG'})
			smach.StateMachine.add('CONFIG', ConfigState(bgi_io.signal, self.action_cb), 
									transitions={'invalid':'WAIT_CONFIG', 
												'success':'WAIT_USER'})
			smach.StateMachine.add('WAIT_CONFIG', WaitConfigState(self.event), 
									transitions={'config_available':'CONFIG'})
			smach.StateMachine.add('WAIT_USER', WaitUserState(self.event), 
									transitions={'reconf_requested':'CONFIG', 
												'user_detected':'MAIN_MENU',
												'out':'out2'})		

		try:
			sm.execute()
		except:
			pass
		print "fsm thread end"
	
	def kill(self):
		self.event.signal('exit')


t = FSMThread()

def handler(a,b):
	print "handling sigint"
	t.kill()
	raise Exception

def config_server():
	rospy.init_node('config_server')
	t.start()
	signal.signal(signal.SIGINT, handler)
	rospy.spin()

if __name__ == "__main__":
	try:
		config_server()
	except Exception:
		print "exiting"


