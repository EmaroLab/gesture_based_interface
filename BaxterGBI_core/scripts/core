#!/usr/bin/env python
import roslib
import rospy
from BaxterGBI_core_srvs.srv import *
import BaxterGBI_input_msgs.msg as bgi_io
import smach
import smach_ros
from std_msgs.msg import Empty
from std_srvs.srv import Trigger, TriggerResponse
import threading
from collections import namedtuple
from gbi_states import *

event = FsmEvent()

subscribers = []

def presence_cb(msg, params):
	global event
	event.event_id='user_detected'
	event.trigger.set()
	#rospy.loginfo("Action %d triggered by the %s:\n%s\n", params["code"], params["topic"], msg)

def action_cb(msg, params):
	global event
	event.event_id='action_' + str(params["code"])
	event.trigger.set()
	#rospy.loginfo("Action %d triggered by the %s:\n%s\n", params["code"], params["topic"], msg)

def config_cb(req):
	global event
	event.event_id='config'
	event.trigger.set()
	#FIXME wait for state machine transition outcome
	return TriggerResponse(success = True, message = "ciao")

def config_server():
	rospy.init_node('config_server')
	serv = rospy.Service('config', Trigger, config_cb)

	sm = smach.StateMachine(outcomes=['MAIN_MENU','out2'])
	with sm:
		print bgi_io
		smach.StateMachine.add('INIT', InitState(), 
								transitions={'config_available':'CONFIG',
											'config_missing':'WAIT_CONFIG'})
		smach.StateMachine.add('CONFIG', ConfigState(bgi_io.signal, action_cb), 
								transitions={'invalid':'WAIT_CONFIG', 
											'success':'WAIT_USER'})
		smach.StateMachine.add('WAIT_CONFIG', WaitConfigState(event), 
								transitions={'config_available':'CONFIG'})
		smach.StateMachine.add('WAIT_USER', WaitUserState(event), 
								transitions={'reconf_requested':'CONFIG', 
											'user_detected':'MAIN_MENU'})
	
	sis = smach_ros.IntrospectionServer('smach_server', sm, '/SM_ROOT')
	sis.start()
	sm.execute()
	rospy.spin()
	sis.stop()

if __name__ == "__main__":
	try:
		config_server()
	except rospy.ROSInterruptException:
		pass


