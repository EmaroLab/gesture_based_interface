#!/usr/bin/env python


## Node used for filtering the data published by the Kinect module.

import argparse
import sys

import struct
import rospy

from baxter_gbi_pbr_msgs.msg import *

import tf


from nav_msgs.msg import Odometry

from geometry_msgs.msg import (
    PoseStamped,
    Pose,
    Point,
    Quaternion,
)
from std_msgs.msg import Header


## Callback function associated with the topic used to obtain the Kinect data.
#
# @param pos: position of the the hand.
# @param data.pose.pose.orientation: orientation of the the hand.
global msg_to_skip, msgs_read
msg_to_skip = 23
msgs_read = 0


def kinect_data_callback(data):
    global rate, pub, filename
    global msg_to_skip, msgs_read

    if msgs_read % msg_to_skip == 0:
        msg = mirror_end_effector()
     
        #TODO -> Parameter to change
        pos = Point()
        pos.x = -data.pose.pose.position.z*2.35
        pos.y = data.pose.pose.position.x*1.3
        pos.z = -data.pose.pose.position.y*1.85
        
        msg.position = pos
        
        
        #TODO -> Now is useless
        orient = Quaternion()
        #orient.x = data.pose.pose.orientation.x
        #orient.y = data.pose.pose.orientation.y
        #orient.z = data.pose.pose.orientation.z
        #orient.w = data.pose.pose.orientation.w
        
        msg.quaternion = orient
        
        filename.write(str(pos.x)+","+str(pos.y)+","+str(pos.z)+"\n")

        pub.publish(msg)
        
    msgs_read += 1


import os
## Node which subscribes to the Kinect's topic (of the hand) and publish on "mirror_end_effector"
def mirror_filter_data():
    
    rospy.loginfo("Initializing node... ")
    rospy.init_node("mirror_filter_data")
    
    limb = sys.argv[1]
    
    global pub, filename
    filename = open("hand_"+limb+"_data.txt","w+")
    
    pub = rospy.Publisher("mirror_end_effector_"+limb, mirror_end_effector, queue_size=1)    
    rospy.Subscriber("/shadow/kinect_"+limb+"_hand", Odometry, kinect_data_callback)
    

    def clean_shutdown():
        rospy.loginfo("\nExiting node...")
        filename.close()
    rospy.on_shutdown(clean_shutdown)

    rospy.spin()

if __name__ == "__main__":
    mirror_filter_data()
