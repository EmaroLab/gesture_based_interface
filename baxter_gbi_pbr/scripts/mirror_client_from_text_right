#!/usr/bin/env python

import argparse

import rospy
import sys

from baxter_interface import CHECK_VERSION
from baxter_gbi_pbr_msgs.msg import mirror_end_effector
from baxter_gbi_pbr_srvs.srv import EnableMirroring

from geometry_msgs.msg import Point, Quaternion


## Node used to do the offline mirroring. Takes the files with the hand movements and publishes in the mirror_end_effector topic.


#Mirror client -> publish data on a topic
def main():

    rospy.loginfo("Initializing node... ")
    rospy.init_node('mirror_client_txt_right', anonymous=True)
    
    pub = rospy.Publisher('mirror_end_effector_right', mirror_end_effector, queue_size=20)
    
    rospy.wait_for_service('enable_mirroring_right')
    try:
        enableMirroring = rospy.ServiceProxy('enable_mirroring_right', EnableMirroring)
        response = enableMirroring(1)
        if response.isError == 0:
            print("Started!")
        else:
            print("Error starting mirroring (right)")
            return
    except rospy.ServiceException, e:
        print("Service call failed: %s"%e)
    
    
    
    rate = rospy.Rate(1)
    
    def clean_shutdown():
        rospy.loginfo("\nExiting...")
        rospy.loginfo("Stopping mirroring...")
            
        try:
            response = enableMirroring(0)
            if response.isError == 0:
                print("Mirroring has been stopped!")
            else:
                print("Error stopping mirroring")
                
        except rospy.ServiceException, e:
            print("Service call failed: %s"%e)
    
    rospy.on_shutdown(clean_shutdown)

    path = "/home/alessio/Scrivania/Mirroring_Test/Record"+sys.argv[1]+"/"

    HandRight = open(path+"hand_right_data.csv","r")

    if HandRight is None:
        print("Problem opening file")
    
    hand_right = HandRight.readlines()

    l = 0
    
    while l < len(hand_right): 
        #Right
        data = mirror_end_effector()
        right_pos = hand_right[l].split(',')
        pos = Point()
        pos.x = float(right_pos[0])
        pos.y = float(right_pos[1])
        pos.z = float(right_pos[2])

        orient = Quaternion()
        data.position = pos
        data.quaternion = orient
        pub.publish(data)
  
        l += 1
        rate.sleep()
    print("Finished to publish data, CTRL+C when baxter has finished")    
    rospy.spin()
        
if __name__ == '__main__':
    main()
